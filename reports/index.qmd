---
output: html_document
editor_options: 
  chunk_output_type: console
---

# Week 4 Assessment

#### *Aspen Ellis*

#### *Monday October 23, 2023*

I copy over the text from your assignment since it means it's easier to figure out what's going on in my notes later, but for your viewing pleasure I have my answers in italics.

I am (suddenly) a shorebird biologist :)

Starting by simulating some oystercatcher data:

```{r}
library(tidyverse)

# Generate sample data
# Sightings of Black Oystercatcher chicks at Santa Cruz beaches
beaches <- c("Cowell's", "Steamer Lane", "Natural Bridges", "Mitchell's", "Main")
# blue, green, black, white, yellow
band_colors <- c("B", "G", "K", "W", "Y") 
# Surveys took place weekly in the summer of 2023
surveys <- seq(as.Date("2023-06-01"), as.Date("2023-08-31"), by = 7)

# Setting the "seed" forces randomized functions (like sample()) to generate
# the same output
set.seed(1538)
# 3 band colors identify a bird. We want 12 birds.
birds <- paste0(
  sample(band_colors, 25, replace = TRUE),
  sample(band_colors, 25, replace = TRUE),
  sample(band_colors, 25, replace = TRUE)
) %>% 
  unique() %>%
  head(12)
bloy_chicks <- tibble(
  # Randomly generate survey data
  beach = sample(beaches, size = 100, replace = TRUE),
  bird = sample(birds, size = 100, replace = TRUE),
  survey = sample(surveys, size = 100, replace = TRUE)
) %>% 
  # Remove duplicates (see ?distinct)
  distinct() %>% 
  # Sort by survey date and location
  arrange(survey, beach)
```

yay now I have a bunch of bumbling bloy babies to ask questions about

**Q1** We're randomly generating data, but we're all going to end up with the same data frames. How is that happening?

*I assume because of how set.seed works? Which still vaguely baffles me but I guess it's because it's generating the same random string for each of us because we're all setting the same seed? If true that's quite cool and I never really understood the point of set.seed until now so enjoying that.*

**Q2** Explain in plain language what this part does. Your answer should be one or two sentences

```{r}
birds <- paste0(
  sample(band_colors, 25, replace = TRUE),
  sample(band_colors, 25, replace = TRUE),
  sample(band_colors, 25, replace = TRUE)
) %>% 
  unique() %>%
  head(12)
```

*It makes me a nice little vector of 25 possible combinations of three color bands and then finds me the ones that are unique and gives me the first 12 of those. So, generating me a nice little list of 12 baby bloys*

**Q3** We generated 100 random survey observations. How many rows are in `bloy_chicks`? Why the difference?

*There are 95 rows in bloy_chicks. It's missing five because the way that it was randomly sampled meant that five rows were duplicates of other rows in the data.*

### **Without a custom function**

We want to estimate where chicks hatched using `tidyverse` functions. Here's our process:

1.  For each bird, where was it seen most often?

2.  If multiple sites are tied, choose the one with the earliest observation

3.  If still tied, randomly choose one

**Q4** Sort the pipelines back into correct order.

```{r}
#FUN!!!

# Find most frequent beach per bird
beach_freq <- bloy_chicks %>% 
  group_by(bird) %>% 
  count(bird, beach) %>% 
  filter(n == max(n)) %>% 
  ungroup()

# Find first date for each bird+beach

beach_early <- bloy_chicks %>% 
  group_by(bird, beach) %>% 
  summarize(earliest = min(survey),
             .groups = "drop")

# Join the two conditions and retain most frequent beach, only earliest
hatch_beach <- beach_freq %>% 
  group_by(bird) %>% 
  left_join(beach_early, by = c("bird", "beach")) %>% 
  filter(earliest == min(earliest)) %>% 
  sample_n(1) %>% # Randomly choose 1 row. See ?sample_n
  ungroup()

```

*Max I need you to know that I've already developed an emotional attachment to each of these imaginary oystercatcher chicks. Look at this man I met in 2021:*

![](images/IMG_6199.jpg){width="531"}

*sorry. getting back on track here.*

## **With a custom function**

There are two issues with the approach above:

1.  It's kind of long and we have to make multiple intermediate data frames. So it's not the easiest code to read.

2.  The logic for estimating a hatching beach is spread out across multiple locations in the code. If we choose a different approach then we have to change everything!

Here's a different approach using a custom function.

1.  Put the logic for estimating the hatching beach in a single function.

2.  Group the data by bird

3.  Summarize each group using your custom function

This is an example of a *split-apply-combine* strategy. Use `group_by()` to *split* our data frame by bird. Write a custom function to estimate the hatching beach for that bird. That's critical: this function works on just one part of the whole! Use `summarize()` to *apply* our function to each bird and *combine* the results.

Below is a skeleton of the custom function with key pieces missing, followed by a *split-apply-combine* skeleton.

```{r}
find_hatching_beach <- function(site, date) {
  # Start with a data frame (or tibble) of site and date for *one* bird
  # Use pipes and dplyr functions to find the hatching beach
  bird_observations <- tibble(site, date)
  result <- bird_observations %>% 
    group_by(site) %>% 
    summarize(earliest = min(date), freq = n()) %>% 
    filter(freq == max(freq)) %>% 
    filter(earliest == min(earliest)) %>% 
    sample_n(1)
  # result should end up as a data frame with one row for the hatching beach
  return(result$site) # return the hatching beach
}

# split-apply-combine
bloy_chicks %>% 
  group_by(bird) %>% 
  summarize(hatch_beach = find_hatching_beach(beach,survey))
```

**Q5** The two *parameters* of `find_hatching_beach()` are named `site` and `date`. When this function is called, what columns in `bloy_chicks` will you use as *arguments* for these parameters?

*`beach` and `survey`*

**Q6** What will be the value of `site` when `find_hatching_beach()` is called on the group for bird YWG? How about WYB?

*YWG & WYB are both Mitchell's :)*
